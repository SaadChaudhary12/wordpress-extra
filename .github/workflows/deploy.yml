# name: Deploy to EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Setup SSH agent
#         uses: webfactory/ssh-agent@v0.7.0
#         with:
#           ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#       - name: Deploy Flask App
#         run: |
#           ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
#             cd /home/ec2-user/wordpress-extra
#             git pull
#             sudo pip3 install -r requirements.txt
#             sudo pkill -f "python3 app.py" || true
#             nohup python3 app.py > app.log 2>&1 &

#             sleep 10

#             PORT=$(grep "Running on http://127.0.0.1" app.log | awk -F: '{print $3}')
#             echo "Flask started on port: $PORT"
#             sudo tee /etc/nginx/conf.d/flask.conf <<EOCONF
#                 server {
#                     listen 80;
#                     server_name _;
#                     location / {
#                         proxy_pass http://127.0.0.1:$PORT;
#                     }
#                 }
#           EOCONF

#                 sudo systemctl reload nginx
#           EOF


################################################################################################################################################################
# 
################################################################################################################################################################


# name: Deploy to EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4
      
#       - name: Configure AWS credentials via OIDC
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::489994096722:role/Saad-Trustpolicy-Role
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Setup SSH agent
#         uses: webfactory/ssh-agent@v0.7.0
#         with:
#           ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#       - name: Get EC2 Private IP
#         id: get_ip
#         run: |
#           PRIVATE_IP=$(aws ec2 describe-instances \
#             --region ${{ secrets.AWS_REGION }} \
#             --filters "Name=tag:Name,Values=Saad-App-ec2" \
#             --query "Reservations[*].Instances[*].PrivateIpAddress" \
#             --output text)
#           echo "PRIVATE_IP=$PRIVATE_IP" >> $GITHUB_ENV

#           sleep 10

#           echo PRIVATE_IP=$PRIVATE_IP

#       - name: Deploy Flask App via Bastion
#         run: |
#           ssh -o StrictHostKeyChecking=no \
#               -o ProxyCommand="ssh -o StrictHostKeyChecking=no -W %h:%p ec2-user@${{ secrets.BASTION_HOST }}" \
#               ec2-user@$PRIVATE_IP << 'EOF'

#             ls

#             cd /home/ec2-user/wordpress-extra
#             sudo chown -R ec2-user:ec2-user /home/ec2-user/wordpress-extra
#             git pull
#             sudo pip3 install -r requirements.txt
#             sudo pkill -f "python3 app.py" || true

#             pwd

#             sleep 10

#             nohup python3 app.py > /home/ec2-user/app.log 2>&1 &

#             sleep 10

#             PORT=$(grep "Running on http://127.0.0.1" /home/ec2-user/app.log | awk -F: '{print $3}')
#             echo "Flask started on port: $PORT"



#             sudo tee /etc/nginx/conf.d/flask.conf <<EOCONF
#             server {
#                 listen 80;
#                 server_name _;
#                 location / {
#                     proxy_pass http://127.0.0.1:$PORT;
#                 }
#             }
#           EOCONF

#               sudo systemctl reload nginx

#           EOF


################################################################################################################################################################
# 
################################################################################################################################################################

name: Upload App to S3

on:
  push:
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Zip application
        run: zip app_package.zip app_lt.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::489994096722:role/Saad-Trustpolicy-Role

      - name: Upload to S3
        run: aws s3 cp app_package.zip s3://terraform-bucket-test20/app_package.zip
